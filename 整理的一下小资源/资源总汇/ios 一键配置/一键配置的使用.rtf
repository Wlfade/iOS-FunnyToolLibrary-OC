{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;\red29\green133\blue25;\red110\green32\blue13;\red186\green0\blue17;
\red180\green0\blue98;\red48\green111\blue121;\red77\green0\blue158;\red46\green13\blue110;\red68\green137\blue147;
\red32\green60\blue63;\red100\green56\blue32;\red0\green11\blue255;\red92\green38\blue153;\red14\green14\blue255;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab866
\pard\tx866\pardeftab866\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \CocoaLigature0 //\cf0 \
\cf2 //  SpecialCollectorConfigurationViewController.m\cf0 \
\cf2 //  SmartMeter\cf0 \
\cf2 //\cf0 \
\cf2 //  Created by Accelerator on 16/5/24.\cf0 \
\cf2 //  Copyright \'a9 2016
\f1 \'c4\'ea
\f0  Accelerator. All rights reserved.\cf0 \
\cf2 //\cf0 \
\cf3 #define WIDTH ([UIScreen mainScreen].bounds.size.width)\
#define HEIGHT ([UIScreen mainScreen].bounds.size.height)\
\cf0 \
\cf3 #import \cf4 "SpecialCollectorConfigurationViewController.h"\cf3 \
#import \cf4 <SystemConfiguration/CaptiveNetwork.h>\cf3 \
#import \cf4 "AppDelegate.h"\cf3 \
#import \cf4 "PullDown.h"\cf3 \
#import \cf4 "Singleton.h"\cf3 \
#import \cf4 "Common.h"\cf3 \
\cf0 \
\cf3 #import \cf4 "ESPTouchTask.h"\cf3 \
#import \cf4 "ESPTouchResult.h"\cf3 \
#import \cf4 "ESP_NetUtil.h"\cf3 \
\cf0 \
\cf5 @interface\cf0  \cf6 SpecialCollectorConfigurationViewController\cf0  ()<\cf7 UITextFieldDelegate\cf0 >\
\
\cf5 @property\cf0  (\cf5 nonatomic\cf0 , \cf5 strong\cf0 ) \cf7 UITextField\cf0  *password;\
\cf5 @property\cf0  (\cf5 nonatomic\cf0 , \cf5 strong\cf0 ) \cf7 UITextField\cf0  *wifiText;\
\
\cf5 @property\cf0  (\cf5 nonatomic\cf0 , \cf5 strong\cf0 ) \cf7 UIView\cf0  *wifiNameView;\
\cf5 @property\cf0  (\cf5 nonatomic\cf0 , \cf5 strong\cf0 ) \cf6 PullDown\cf0  *contentrator;\
\
\cf5 @property\cf0  (\cf5 nonatomic\cf0 , \cf5 strong\cf0 ) \cf7 NSMutableArray\cf0  *concentratorId;\
\cf5 @property\cf0  (\cf5 nonatomic\cf0 , \cf5 strong\cf0 ) \cf7 UIView\cf0  *backView;\
\
\cf5 @property\cf0  (\cf5 nonatomic\cf0 , \cf5 strong\cf0 ) \cf7 NSString\cf0  *ssid;\
\cf5 @property\cf0  (\cf5 strong\cf0 , \cf5 nonatomic\cf0 ) \cf7 NSString\cf0  *bssid;\
\cf5 @property\cf0  (\cf5 atomic\cf0 , \cf5 strong\cf0 ) \cf6 ESPTouchTask\cf0  *_esptouchTask;\
\
\cf5 @property\cf0  (\cf5 nonatomic\cf0 , \cf5 assign\cf0 ) \cf5 BOOL\cf0  _isConfirmState;\
\cf5 @property\cf0  (\cf5 strong\cf0 , \cf5 nonatomic\cf0 ) \cf7 UIButton\cf0  *connect;\
\cf5 @property\cf0  (\cf5 strong\cf0 , \cf5 nonatomic\cf0 ) \cf7 UIActivityIndicatorView\cf0  *_spinner;\
\
\
\cf5 @end\cf0 \
\
\cf5 @implementation\cf0  SpecialCollectorConfigurationViewController\
\
- (\cf5 void\cf0 )viewDidLoad \{\
    [\cf5 super\cf0  \cf8 viewDidLoad\cf0 ];\
    \cf5 self\cf0 .\cf9 titleName\cf0  = \cf4 @"
\f1 \'b2\'c9\'bc\'af\'c6\'f7\'c5\'e4\'d6\'c3
\f0 "\cf0 ;\
    \cf5 self\cf0 .\cf9 concentratorId\cf0  = [\cf7 NSMutableArray\cf0  \cf8 array\cf0 ];\
    [\cf5 self\cf0  \cf10 createCenter\cf0 ];\
    [\cf5 self\cf0  \cf10 createBack\cf0 ];\
\
\}\
- (\cf5 void\cf0 )createBack\
\{\
    \cf2 // 
\f1 \'b4\'b4\'bd\'a8\'b7\'e7\'bb\'f0\'c2\'d6
\f0 \cf0 \
    \cf5 self\cf0 .\cf9 _spinner\cf0  = [[\cf7 UIActivityIndicatorView\cf0  \cf8 alloc\cf0 ] \cf8 initWithFrame\cf0 :\cf8 CGRectMake\cf0 (\cf11 WIDTH\cf0  / \cf12 2\cf0  - \cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 15\cf0 , \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 440\cf0 , \cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 30\cf0 , \cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 30\cf0 )];\
    [\cf5 self\cf0 .\cf13 view\cf0  \cf8 addSubview\cf0 :\cf5 self\cf0 .\cf9 _spinner\cf0 ];\
    \
    \cf5 self\cf0 .\cf9 backView\cf0  = [[\cf7 UIView\cf0  \cf8 alloc\cf0 ] \cf8 initWithFrame\cf0 :\cf8 CGRectMake\cf0 (\cf12 0\cf0 , \cf12 0\cf0 , \cf11 WIDTH\cf0  , \cf11 HEIGHT\cf0 )];\
    \cf5 self\cf0 .\cf9 backView\cf0 .\cf13 backgroundColor\cf0  = [\cf7 UIColor\cf0  \cf8 blackColor\cf0 ];\
    \cf5 self\cf0 .\cf9 backView\cf0 .\cf13 alpha\cf0  = \cf12 0.3\cf0 ;\
    \cf2 // 
\f1 \'b4\'b4\'bd\'a8\'d7\'f3\'c9\'cf\'bd\'c7\'c9\'e8\'d6\'c3\'b0\'b4\'c5\'a5
\f0 \cf0 \
    \cf7 UIButton\cf0  *setButton = [[\cf7 UIButton\cf0  \cf8 alloc\cf0 ] \cf8 initWithFrame\cf0 :\cf8 CGRectMake\cf0 (\cf12 0\cf0 , \cf12 0\cf0 , \cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 30\cf0 , \cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 30\cf0 )];\
    [setButton \cf8 setBackgroundImage\cf0 :[\cf7 UIImage\cf0  \cf8 imageNamed\cf0 :\cf4 @"back"\cf0 ] \cf8 forState\cf0 :\cf8 UIControlStateNormal\cf0 ];\
    [setButton \cf8 addTarget\cf0 :\cf5 self\cf0  \cf8 action\cf0 :\cf5 @selector\cf0 (backAction) \cf8 forControlEvents\cf0 :\cf8 UIControlEventTouchUpInside\cf0 ];\
    \cf7 UIBarButtonItem\cf0  *settingButton = [[\cf7 UIBarButtonItem\cf0  \cf8 alloc\cf0 ] \cf8 initWithCustomView\cf0 :setButton];\
    \cf2 //    self.navigationController.navigationBar.tintColor = [UIColor whiteColor];\cf0 \
    \cf5 self\cf0 .\cf13 navigationItem\cf0 .\cf13 leftBarButtonItem\cf0 = settingButton;\
\}\
\
- (\cf5 void\cf0 )backAction\
\{\
    [\cf5 self\cf0 .\cf13 navigationController\cf0  \cf8 popViewControllerAnimated\cf0 :\cf5 YES\cf0 ];\
\}\
\
- (\cf5 void\cf0 )createCenter\
\{\
    \cf7 NSArray\cf0  *titleArr = \cf12 @[\cf4 @"
\f1 \'c7\'eb\'d1\'a1\'d4\'f1\'cd\'f8\'c2\'e7
\f0 :"\cf0 , \cf4 @"
\f1 \'c7\'eb\'d1\'a1\'d4\'f1\'c3\'dc\'c2\'eb
\f0 :"\cf12 ]\cf0 ;\
    \cf7 NSArray\cf0  *picArr = \cf12 @[\cf4 @"44"\cf0 , \cf4 @"password"\cf12 ]\cf0 ;\
    \cf7 NSArray\cf0  *btnArr = \cf12 @[\cf4 @"more"\cf0 , \cf4 @"view_offs"\cf12 ]\cf0 ;\
    \cf5 for\cf0  (\cf5 int\cf0  i = \cf12 0\cf0 ; i < \cf12 2\cf0 ; i++) \{\
        \cf7 UILabel\cf0  *label = [[\cf7 UILabel\cf0  \cf8 alloc\cf0 ] \cf8 initWithFrame\cf0 :\cf8 CGRectMake\cf0 (\cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 50\cf0 , \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 129\cf0  + \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 100\cf0  * i, \cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 200\cf0 , \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 30\cf0 )];\
        label.\cf13 text\cf0  = titleArr[i];\
        label.\cf13 textColor\cf0  = [\cf5 self\cf0  \cf10 getColor\cf0 :\cf4 @"323232"\cf0 ];\
        label.\cf13 font\cf0  = [\cf7 UIFont\cf0  \cf8 systemFontOfSize\cf0 :\cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 22\cf0 ];\
        [\cf5 self\cf0 .\cf13 view\cf0  \cf8 addSubview\cf0 :label];\
        \cf7 UIView\cf0  *netBackView = [[\cf7 UIView\cf0  \cf8 alloc\cf0 ] \cf8 init\cf0 ];\
        \cf5 if\cf0  (i != \cf12 2\cf0 ) \{\
            netBackView.\cf13 frame\cf0  = \cf8 CGRectMake\cf0 (\cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 40\cf0 , \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 164\cf0  + \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 100\cf0  * i, \cf11 WIDTH\cf0  - \cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 80\cf0 , \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 50\cf0 );\
            netBackView.\cf13 layer\cf0 .\cf13 masksToBounds\cf0  = \cf5 YES\cf0 ;\
            netBackView.\cf13 layer\cf0 .\cf13 borderColor\cf0  = [[\cf5 self\cf0  \cf10 getColor\cf0 :\cf4 @"646464"\cf0 ] \cf8 CGColor\cf0 ] ;\
            \cf5 if\cf0  (i == \cf12 1\cf0 ) \{\
                netBackView.\cf13 layer\cf0 .\cf13 borderWidth\cf0  = \cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 1\cf0 ;\
            \}\
            \
            netBackView.\cf13 layer\cf0 .\cf13 cornerRadius\cf0  = netBackView.\cf13 frame\cf0 .\cf13 size\cf0 .\cf13 height\cf0  / \cf12 2\cf0 ;\
            [\cf5 self\cf0 .\cf13 view\cf0  \cf8 addSubview\cf0 :netBackView];\
        \}\
        \
        \cf7 UIImageView\cf0  *pic = [[\cf7 UIImageView\cf0  \cf8 alloc\cf0 ] \cf8 initWithFrame\cf0 :\cf8 CGRectMake\cf0 (\cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 19\cf0 , \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 10\cf0 , netBackView.\cf13 frame\cf0 .\cf13 size\cf0 .\cf13 height\cf0  - \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 20\cf0 , netBackView.\cf13 frame\cf0 .\cf13 size\cf0 .\cf13 height\cf0  - \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 20\cf0 )];\
        [pic \cf8 setImage\cf0 :[\cf7 UIImage\cf0  \cf8 imageNamed\cf0 :picArr[i]]];\
        [netBackView \cf8 addSubview\cf0 :pic];\
        \
        \cf5 if\cf0  (i == \cf12 0\cf0  || i == \cf12 1\cf0 ) \{\
            \cf7 UIView\cf0  *decorate = [[\cf7 UIView\cf0  \cf8 alloc\cf0 ] \cf8 initWithFrame\cf0 :\cf8 CGRectMake\cf0 (\cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 55\cf0 , \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 10\cf0 , \cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 1\cf0 , netBackView.\cf13 frame\cf0 .\cf13 size\cf0 .\cf13 height\cf0  - \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 20\cf0 )];\
            [decorate \cf8 setBackgroundColor\cf0 :[\cf5 self\cf0  \cf10 getColor\cf0 :\cf4 @"646464"\cf0 ]];\
            [netBackView \cf8 addSubview\cf0 :decorate];\
        \}\
        \
        \cf5 if\cf0  (i == \cf12 1\cf0 ) \{\
            \cf7 UIButton\cf0  *btn = [[\cf7 UIButton\cf0  \cf8 alloc\cf0 ] \cf8 initWithFrame\cf0 :\cf8 CGRectMake\cf0 (\cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 250\cf0 , \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 10\cf0 , netBackView.\cf13 frame\cf0 .\cf13 size\cf0 .\cf13 height\cf0  - \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 20\cf0 , netBackView.\cf13 frame\cf0 .\cf13 size\cf0 .\cf13 height\cf0  - \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 20\cf0 )];\
            [btn \cf8 setBackgroundImage\cf0 :[\cf7 UIImage\cf0  \cf8 imageNamed\cf0 :btnArr[i]] \cf8 forState\cf0 :\cf8 UIControlStateNormal\cf0 ];\
            btn.\cf13 tag\cf0  = i + \cf12 1\cf0 ;\
            btn.\cf13 selected\cf0  = \cf5 NO\cf0 ;\
            [btn \cf8 addTarget\cf0 :\cf5 self\cf0  \cf8 action\cf0 :\cf5 @selector\cf0 (btnAction:) \cf8 forControlEvents\cf0 :\cf8 UIControlEventTouchUpInside\cf0 ];\
            [netBackView \cf8 addSubview\cf0 :btn];\
        \}\
        \
        \
        \cf5 if\cf0  (i == \cf12 0\cf0  || i == \cf12 2\cf0 ) \{\
            \
            \cf5 if\cf0  (i == \cf12 0\cf0 ) \{\
                \cf2 // 
\f1 \'b4\'b4\'bd\'a8
\f0 \cf0 \
                \cf5 self\cf0 .\cf9 wifiNameView\cf0  = [[\cf7 UIView\cf0  \cf8 alloc\cf0 ] \cf8 initWithFrame\cf0 :\cf8 CGRectMake\cf0 (\cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 40\cf0 , \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 164\cf0  + \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 100\cf0  * i, \cf11 WIDTH\cf0  - \cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 80\cf0 , \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 50\cf0 )];\
                \
                \
                \cf5 self\cf0 .\cf9 wifiNameView\cf0 .\cf13 layer\cf0 .\cf13 masksToBounds\cf0  = \cf5 YES\cf0 ;\
                \
                \cf5 self\cf0 .\cf9 wifiNameView\cf0 .\cf13 layer\cf0 .\cf13 borderColor\cf0  = [[\cf5 self\cf0  \cf10 getColor\cf0 :\cf4 @"646464"\cf0 ] \cf8 CGColor\cf0 ];\
                \cf5 self\cf0 .\cf9 wifiNameView\cf0 .\cf13 layer\cf0 .\cf13 borderWidth\cf0  = \cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 1\cf0 ;\
                \cf5 self\cf0 .\cf9 wifiNameView\cf0 .\cf13 layer\cf0 .\cf13 cornerRadius\cf0  = \cf5 self\cf0 .\cf9 wifiNameView\cf0 .\cf13 frame\cf0 .\cf13 size\cf0 .\cf13 height\cf0  / \cf12 2\cf0 ;\
                \
                [\cf5 self\cf0 .\cf13 view\cf0  \cf8 addSubview\cf0 :\cf5 self\cf0 .\cf9 wifiNameView\cf0 ];\
                \
                \cf5 self\cf0 .\cf9 wifiText\cf0  = [[\cf7 UITextField\cf0  \cf8 alloc\cf0 ] \cf8 initWithFrame\cf0 :\cf8 CGRectMake\cf0 (\cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 65\cf0 , \cf11 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 5\cf0 , \cf11 WIDTH\cf0  / \cf12 375\cf0  * \cf12 150\cf0 , \cf5 self\cf0 .\cf9 wifiNameView\cf0 .\cf13 frame\cf0 .\cf13 size\cf0 .\cf13 height\cf0  - \cf11 WIDTH\cf0  / \cf12 667\cf0  * \cf12 10\cf0 )];\
\cf2 //                self.wifiText.secureTextEntry = YES;\cf0 \
                \cf5 self\cf0 .\cf9 wifiText\cf0 .\cf13 textColor\cf0  = [\cf5 self\cf0  \cf10 getColor\cf0 :\cf4 @"646464"\cf0 ];\
                [\cf5 self\cf0 .\cf9 wifiNameView\cf0  \cf8 addSubview\cf0 :\cf5 self\cf0 .\cf9 wifiText\cf0 ];\
                \
                \cf7 NSDictionary\cf0  *netInfo = [\cf5 self\cf0  \cf10 fetchNetInfo\cf0 ];\
                \cf5 self\cf0 .\cf9 ssid\cf0  = [netInfo \cf8 objectForKey\cf0 :\cf4 @"SSID"\cf0 ]; \cf2 //
\f1 \'bb\'f1\'c8\'a1\'b5\'b1\'c7\'b0\'ca\'d6\'bb\'fa\'c1\'ac\'bd\'d3
\f0 Wifi
\f1 \'b5\'c4\'c3\'fb\'d7\'d6
\f0 \cf0 \
                \cf5 self\cf0 .\cf9 bssid\cf0  = [netInfo \cf8 objectForKey\cf0 :\cf4 @"BSSID"\cf0 ]; \cf2 //
\f1 \'bb\'f1\'c8\'a1\'b5\'b1\'c7\'b0\'ca\'d6\'bb\'fa\'c1\'ac\'bd\'d3
\f0 wifi
\f1 \'b5\'c4\'b5\'d8\'d6\'b7
\f0 \cf0 \
                \
                \cf5 self\cf0 .\cf9 wifiText\cf0 .\cf13 text\cf0  = [\cf7 NSString\cf0  \cf8 stringWithFormat\cf0 :\cf4 @"%@"\cf0 ,\cf5 self\cf0 .\cf9 ssid\cf0 ];\
                \cf9 _wifiText\cf0 .\cf13 enabled\cf0  = \cf5 NO\cf0 ;\
                \cf7 NSString\cf0  *bssid = [[\cf7 NSUserDefaults\cf0  \cf8 standardUserDefaults\cf0 ]\cf8 objectForKey\cf0 :\cf4 @"BSSID"\cf0 ];\
                \cf5 if\cf0  (bssid != \cf5 nil\cf0 ) \{\
                    \cf5 if\cf0  ([\cf5 self\cf0 .\cf10 bssid\cf0  \cf8 isEqualToString\cf0 :bssid]) \{\
                        \cf9 _password\cf0 .\cf8 text\cf0  = [[\cf7 NSUserDefaults\cf0  \cf8 standardUserDefaults\cf0 ]\cf8 objectForKey\cf0 :\cf4 @"passWord"\cf0 ];\
                    \}\
\
                \}\cf5 else\cf0 \{\
                    \
                \}\
                \
            \} \cf5 else\cf0  \{\
                \
            \}\
        \} \cf5 else\cf0  \{\
            \cf5 self\cf0 .\cf10 password\cf0  = [[\cf7 UITextField\cf0  \cf8 alloc\cf0 ] \cf8 initWithFrame\cf0 :\cf8 CGRectMake\cf0 (\cf8 WIDTH\cf0  / \cf12 375\cf0  * \cf12 65\cf0 , \cf8 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 5\cf0 , \cf8 WIDTH\cf0  / \cf12 375\cf0  * \cf12 150\cf0 , netBackView.\cf8 frame\cf0 .\cf13 size\cf0 .\cf13 height\cf0  - \cf8 WIDTH\cf0  / \cf12 667\cf0  * \cf12 10\cf0 )];\
            \cf5 self\cf0 .\cf10 password\cf0 .\cf8 secureTextEntry\cf0  = \cf5 YES\cf0 ;\
            \cf5 self\cf0 .\cf10 password\cf0 .\cf8 textColor\cf0  = [\cf5 self\cf0  \cf10 getColor\cf0 :\cf4 @"646464"\cf0 ];\
            [netBackView \cf8 addSubview\cf0 :\cf5 self\cf0 .\cf10 password\cf0 ];\
        \}\
    \}\
    \
    [\cf5 self\cf0  \cf10 createConnect\cf0 ];\
    \
\}\
\cf2 // 
\f1 \'b4\'b4\'bd\'a8\'cc\'e1\'bd\'bb\'b0\'b4\'c5\'a5
\f0 \cf0 \
- (\cf5 void\cf0 )createConnect\
\{\
    \cf9 _connect\cf0  = [[\cf7 UIButton\cf0  \cf8 alloc\cf0 ] \cf8 initWithFrame\cf0 :\cf8 CGRectMake\cf0 (\cf8 WIDTH\cf0  / \cf12 375\cf0  * \cf12 40\cf0 , \cf8 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 430\cf0 , \cf8 WIDTH\cf0  - \cf8 WIDTH\cf0  / \cf12 375\cf0  * \cf12 80\cf0 , \cf8 HEIGHT\cf0  / \cf12 667\cf0  * \cf12 60\cf0 )];\
    \cf9 _connect\cf0 .\cf8 clipsToBounds\cf0  = \cf5 YES\cf0 ;\
    \cf9 _connect\cf0 .\cf8 layer\cf0 .\cf8 cornerRadius\cf0  = \cf9 _connect\cf0 .\cf8 frame\cf0 .\cf13 size\cf0 .\cf13 height\cf0  / \cf12 2\cf0 ;\
    [\cf9 _connect\cf0  \cf8 setBackgroundImage\cf0 :[\cf7 UIImage\cf0  \cf8 imageNamed\cf0 :\cf4 @"btns.png"\cf0 ] forState:\cf8 UIControlStateNormal\cf0 ];\
    [\cf9 _connect\cf0  \cf8 setTitle\cf0 :\cf4 @"
\f1 \'c1\'ac\'bd\'d3
\f0 "\cf0  forState:\cf8 UIControlStateNormal\cf0 ];\
    \cf9 _connect\cf0 .\cf8 titleLabel\cf0 .\cf8 textColor\cf0  = [\cf7 UIColor\cf0  \cf8 whiteColor\cf0 ];\
    [\cf9 _connect\cf0  \cf8 addTarget\cf0 :\cf5 self\cf0  action:\cf5 @selector\cf0 (commitAction) forControlEvents:\cf8 UIControlEventTouchUpInside\cf0 ];\
    [\cf5 self\cf0 .\cf8 view\cf0  \cf8 addSubview\cf0 :\cf9 _connect\cf0 ];\
\}\
\cf2 //
\f1 \'c1\'ac\'bd\'d3\'b0\'b4\'c5\'a5\'b5\'c4\'b5\'e3\'bb\'f7\'ca\'c2\'bc\'fe
\f0 \cf0 \
- (\cf5 void\cf0 )commitAction\{\
    \cf5 if\cf0  (\cf5 self\cf0 .\cf10 password\cf0 .\cf8 text\cf0 .\cf8 length\cf0  > \cf12 0\cf0 ) \{\
        [\cf5 self\cf0 .\cf10 _spinner\cf0  \cf8 startAnimating\cf0 ];\
        [\cf5 self\cf0  \cf10 enableCancelBtn\cf0 ];\
        \cf13 dispatch_queue_t\cf0  queue = \cf8 dispatch_get_global_queue\cf0 (DISPATCH_QUEUE_PRIORITY_DEFAULT, \cf12 0\cf0 );\
        \cf8 dispatch_async\cf0 (queue, ^\{\
            \cf8 NSLog\cf0 (\cf4 @"ESPView"\cf0 );\
            \cf6 ESPTouchResult\cf0  *esptouchResult = [\cf5 self\cf0  \cf10 executeForResults\cf0 ];\
            \cf8 dispatch_async\cf0 (\cf8 dispatch_get_main_queue\cf0 (), ^\{\
                [\cf5 self\cf0 .\cf10 _spinner\cf0  \cf8 stopAnimating\cf0 ];\
                [\cf5 self\cf0  \cf10 enableConfirmBtn\cf0 ];\
                \cf5 if\cf0  (esptouchResult.\cf10 isSuc\cf0 ) \{\
                    \cf8 NSLog\cf0 (\cf4 @"
\f1 \'c1\'ac\'bd\'d3\'b3\'c9\'b9\'a6
\f0 "\cf0 );\
                    \
                    \cf7 UIAlertView\cf0  *alert = [[\cf7 UIAlertView\cf0  \cf8 alloc\cf0 ]\cf8 initWithTitle\cf0 :\cf4 @"
\f1 \'cc\'e1\'ca\'be
\f0 "\cf0  message:\cf4 @"
\f1 \'c1\'ac\'bd\'d3\'b3\'c9\'b9\'a6
\f0 "\cf0  delegate:\cf5 nil\cf0  cancelButtonTitle:\cf4 @"
\f1 \'c8\'b7\'b6\'a8
\f0 "\cf0  otherButtonTitles: \cf5 nil\cf0 ];\
                    [alert \cf8 show\cf0 ];\
                    \
                    [[\cf7 NSUserDefaults\cf0  \cf8 standardUserDefaults\cf0 ]\cf8 setObject\cf0 :esptouchResult.\cf10 bssid\cf0  forKey:\cf4 @"BSSID"\cf0 ];\
                    [[NSUserDefaults standardUserDefaults]setObject:_password.text forKey:\cf4 @"passWord"\cf0 ];\
\cf2 //                    [self._spinner stopAnimating];\cf0 \
\cf2 //                    [self enableConfirmBtn];\cf0 \
                \}\cf5 else\cf0 \{\
                    \cf8 NSLog\cf0 (\cf4 @"
\f1 \'c1\'ac\'bd\'d3\'ca\'a7\'b0\'dc
\f0 "\cf0 );\
                    [\cf5 self\cf0  \cf8 performSelector\cf0 :\cf5 @selector\cf0 (showAlert) \cf8 withObject\cf0 :\cf5 nil\cf0  \cf8 afterDelay\cf0 :\cf12 1.0f\cf0 ];\
\
                \}\
            \});\
        \});\
    \}\cf5 else\cf0 \{\
        \cf7 UIAlertView\cf0  *alert = [[\cf7 UIAlertView\cf0  \cf8 alloc\cf0 ] \cf8 initWithTitle\cf0 :\cf4 @"
\f1 \'cc\'e1\'ca\'be
\f0 "\cf0  \cf8 message\cf0 :\cf4 @"
\f1 \'c7\'eb\'ca\'e4\'c8\'eb\'c3\'dc\'c2\'eb
\f0 "\cf0  \cf8 delegate\cf0 :\cf5 self\cf0  \cf8 cancelButtonTitle\cf0 :\cf4 @"
\f1 \'ce\'d2\'d6\'aa\'b5\'c0\'c1\'cb
\f0 "\cf0  \cf8 otherButtonTitles\cf0 :\cf5 nil\cf0 , \cf5 nil\cf0 ];\
        [alert \cf8 show\cf0 ];\
    \}\
\}\
- (\cf5 void\cf0 )showAlert\{\
    \cf7 UIAlertView\cf0  *alert = [[\cf7 UIAlertView\cf0  \cf8 alloc\cf0 ]\cf8 initWithTitle\cf0 :\cf4 @"
\f1 \'cc\'e1\'ca\'be
\f0 "\cf0  \cf8 message\cf0 :\cf4 @"
\f1 \'c1\'ac\'bd\'d3\'ca\'a7\'b0\'dc
\f0 "\cf0  \cf8 delegate\cf0 :\cf5 nil\cf0  \cf8 cancelButtonTitle\cf0 :\cf4 @"
\f1 \'c8\'b7\'b6\'a8
\f0 "\cf0  \cf8 otherButtonTitles\cf0 :\cf5 nil\cf0 ];\
    [alert \cf8 show\cf0 ];\
    \cf5 return\cf0 ;\
\}\
\cf3 #pragma mark - the example of how to use executeForResults\
\cf0 - (\cf6 ESPTouchResult\cf0  *) executeForResults\
\{\
    \cf7 NSString\cf0  *apSsid = \cf5 self\cf0 .\cf9 wifiText\cf0 .\cf13 text\cf0 ;\
    \cf7 NSString\cf0  *apPwd = \cf5 self\cf0 .\cf9 password\cf0 .\cf13 text\cf0 ;\
    \cf7 NSString\cf0  *apBssid = \cf5 self\cf0 .\cf9 bssid\cf0 ;\
    \cf5 BOOL\cf0  isSsidHidden = \cf5 YES\cf0 ;\
    \cf2 //    int taskCount = [self._taskResultCountTextView.text intValue];\cf0 \
    \cf5 self\cf0 .\cf9 _esptouchTask\cf0  =\
    [[\cf6 ESPTouchTask\cf0  \cf8 alloc\cf0 ]\cf10 initWithApSsid\cf0 :apSsid \cf10 andApBssid\cf0 :apBssid \cf10 andApPwd\cf0 :apPwd \cf10 andIsSsidHiden\cf0 :isSsidHidden];\
    \
    \cf6 ESPTouchResult\cf0  * esptouchResult = [\cf5 self\cf0 .\cf9 _esptouchTask\cf0  \cf10 executeForResult\cf0 ];\
    \cf8 NSLog\cf0 (\cf4 @"ESPViewController executeForResult() result is: %@"\cf0 ,esptouchResult);\
    \cf5 return\cf0  esptouchResult;\
\}\
\cf2 // enable confirm button\cf0 \
- (\cf5 void\cf0 )enableConfirmBtn\
\{\
    \cf5 self\cf0 .\cf9 _isConfirmState\cf0  = \cf5 YES\cf0 ;\
\cf2 //    [self._connect setTitle:@"Confirm" forState:UIControlStateNormal];\cf0 \
    [\cf5 self\cf0 .\cf9 connect\cf0  \cf8 setTitle\cf0 :\cf4 @"
\f1 \'c1\'ac\'bd\'d3
\f0 "\cf0  \cf8 forState\cf0 :\cf8 UIControlStateNormal\cf0 ];\
\
\}\
\
\cf2 // enable cancel button\cf0 \
- (\cf5 void\cf0 )enableCancelBtn\
\{\
    \cf5 self\cf0 .\cf9 _isConfirmState\cf0  = \cf5 NO\cf0 ;\
\cf2 //    [self._connect setTitle:@"Cancel" forState:UIControlStateNormal];\cf0 \
    [\cf5 self\cf0 .\cf9 connect\cf0  \cf8 setTitle\cf0 :\cf4 @"
\f1 \'c8\'a1\'cf\'fb
\f0 "\cf0  \cf8 forState\cf0 :\cf8 UIControlStateNormal\cf0 ];\
\
\}\
- (\cf7 NSString\cf0  *)fetchSsid\
\{\
    \cf7 NSDictionary\cf0  *ssidInfo = [\cf5 self\cf0  \cf10 fetchNetInfo\cf0 ];\
    \
    \cf5 return\cf0  [ssidInfo \cf8 objectForKey\cf0 :\cf4 @"SSID"\cf0 ];\
\}\
\
- (\cf7 NSString\cf0  *)fetchBssid\
\{\
    \cf7 NSDictionary\cf0  *bssidInfo = [\cf5 self\cf0  \cf10 fetchNetInfo\cf0 ];\
    \
    \cf5 return\cf0  [bssidInfo \cf8 objectForKey\cf0 :\cf4 @"BSSID"\cf0 ];\
\}\
\
\cf2 // refer to {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/5198716/iphone-get-ssid-without-private-library"}}{\fldrslt \cf14 http://stackoverflow.com/questions/5198716/iphone-get-ssid-without-private-library}}\cf0 \
- (\cf7 NSDictionary\cf0  *)fetchNetInfo\
\{\
    \cf7 NSArray\cf0  *interfaceNames = \cf8 CFBridgingRelease\cf0 (\cf8 CNCopySupportedInterfaces\cf0 ());\
    \cf2 //    NSLog(@"%s: Supported interfaces: %@", __func__, interfaceNames);\cf0 \
    \
    \cf7 NSDictionary\cf0  *SSIDInfo;\
    \cf5 for\cf0  (\cf7 NSString\cf0  *interfaceName \cf5 in\cf0  interfaceNames) \{\
        SSIDInfo = \cf8 CFBridgingRelease\cf0 (\
                                     \cf8 CNCopyCurrentNetworkInfo\cf0 ((\cf5 __bridge\cf0  \cf13 CFStringRef\cf0 )interfaceName));\
        \cf2 //        NSLog(@"%s: %@ => %@", __func__, interfaceName, SSIDInfo);\cf0 \
        \
        \cf5 BOOL\cf0  isNotEmpty = (SSIDInfo.\cf13 count\cf0  > \cf12 0\cf0 );\
        \cf5 if\cf0  (isNotEmpty) \{\
            \cf5 break\cf0 ;\
        \}\
    \}\
    \cf5 return\cf0  SSIDInfo;\
\}\
\
\
- (\cf5 void\cf0 )btnAction:(\cf5 id\cf0 )sender\
\{\
    \cf7 UIButton\cf0  *button = sender;\
    \cf2 // 
\f1 \'c5\'d0\'b6\'cf\'b5\'b1
\f0 button
\f1 \'ca\'c7\'bf\'c9\'bc\'fb\'b2\'bb\'bf\'c9\'bc\'fb\'b0\'b4\'c5\'a5\'b5\'c4\'ca\'b1\'ba\'f2\'d4\'d9\'bd\'f8\'d0\'d0\'c5\'d0\'b6\'cf\'b0\'b4\'c5\'a5\'d7\'b4\'cc\'ac
\f0 \cf0 \
    \cf5 if\cf0  (button.\cf13 tag\cf0  == \cf12 2\cf0 ) \{\
        \cf5 if\cf0  (button.\cf13 selected\cf0  == \cf5 NO\cf0 ) \{\
            [button \cf8 setBackgroundImage\cf0 :[\cf7 UIImage\cf0  \cf8 imageNamed\cf0 :\cf4 @"view_ons"\cf0 ] \cf8 forState\cf0 :\cf8 UIControlStateNormal\cf0 ];\
            \cf5 self\cf0 .\cf9 password\cf0 .\cf13 secureTextEntry\cf0  = \cf5 NO\cf0 ;\
            button.\cf13 selected\cf0  = \cf5 YES\cf0 ;\
        \} \cf5 else\cf0  \{\
            [button \cf8 setBackgroundImage\cf0 :[\cf7 UIImage\cf0  \cf8 imageNamed\cf0 :\cf4 @"view_offs"\cf0 ] \cf8 forState\cf0 :\cf8 UIControlStateNormal\cf0 ];\
            \cf5 self\cf0 .\cf9 password\cf0 .\cf13 secureTextEntry\cf0  = \cf5 YES\cf0 ;\
            button.\cf13 selected\cf0  = \cf5 NO\cf0 ;\
        \}\
        \
    \}\
\}\
\cf3 #pragma mark 16
\f1 \'bd\'f8\'d6\'c6\'d1\'d5\'c9\'ab\'d7\'aa\'bb\'af
\f0 RGB\
\cf0 - (\cf7 UIColor\cf0  *)getColor:(\cf7 NSString\cf0  *)hexColor \{\
    \cf5 unsigned\cf0  \cf5 int\cf0  red,green,blue;\
    \cf13 NSRange\cf0  range;\
    range.\cf13 length\cf0  = \cf12 2\cf0 ;\
    \
    range.\cf13 location\cf0  = \cf12 0\cf0 ;\
    [[\cf7 NSScanner\cf0  \cf8 scannerWithString\cf0 :[hexColor \cf8 substringWithRange\cf0 :range]] \cf8 scanHexInt\cf0 :&red];\
    \
    range.\cf13 location\cf0  = \cf12 2\cf0 ;\
    [[\cf7 NSScanner\cf0  \cf8 scannerWithString\cf0 :[hexColor \cf8 substringWithRange\cf0 :range]] \cf8 scanHexInt\cf0 :&green];\
    \
    range.\cf13 location\cf0  = \cf12 4\cf0 ;\
    [[\cf7 NSScanner\cf0  \cf8 scannerWithString\cf0 :[hexColor \cf8 substringWithRange\cf0 :range]] \cf8 scanHexInt\cf0 :&blue];\
    \
    \cf5 return\cf0  [\cf7 UIColor\cf0  \cf8 colorWithRed\cf0 :(\cf5 float\cf0 )(red/\cf12 255.0f\cf0 ) \cf8 green\cf0 :(\cf5 float\cf0 )(green / \cf12 255.0f\cf0 ) \cf8 blue\cf0 :(\cf5 float\cf0 )(blue / \cf12 255.0f\cf0 ) \cf8 alpha\cf0 :\cf12 1.0f\cf0 ];\
\}\
\cf2 //
\f1 \'b5\'e3\'bb\'f7\'c6\'c1\'c4\'bb\'bf\'d5\'b0\'d7\'b4\'a6\'c8\'a5\'b5\'f4\'bc\'fc\'c5\'cc
\f0 \cf0 \
- (\cf5 void\cf0 )touchesBegan:(\cf7 NSSet\cf0  *)touches withEvent:(\cf7 UIEvent\cf0  *)event\
\{\
    \
    [\cf5 self\cf0 .\cf9 wifiText\cf0  \cf8 resignFirstResponder\cf0 ]; \cf2 //wifi 
\f1 \'b5\'c4\'ce\'c4\'bc\'fe\'ca\'e4\'c8\'eb\'bf\'f2
\f0 \cf0 \
    [\cf5 self\cf0 .\cf9 password\cf0  \cf8 resignFirstResponder\cf0 ];\
\}\
\cf2 //- (NSString *)description\cf0 \
\cf2 //\{\cf0 \
\cf2 //    NSString *ipAddrDataStr = [ESP_NetUtil descriptionInetAddrByData:self.ipAddrData];\cf0 \
\cf2 //    return ipAddrDataStr;\cf0 \
\cf2 //\}\cf0 \
\
\
\cf5 @end\cf0 \
}